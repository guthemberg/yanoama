#!/usr/bin/env python
### BEGIN INIT INFO
# Provides:          pilotd
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start the Pilot system info collector
# Description:       Pilot daemon that collects system and process information.
### END INIT INFO

import sys
import logging
import SocketServer

sys.path.append('/home/upmc_aren/yanoama')

try:
	from yanoama.pilot.system.daemon import Daemon
	from yanoama.pilot.core import settings
	from yanoama.pilot.system.server import ThreadedTCPRequestHandler
except:
	print 'Pilot is not installed, bye.'
	sys.exit()


PIDFILE = '/var/run/pilotd.pid'
# Keep all log files in one place
LOGFILE = '/usr/local/yanoama/pilot.log'

# Configure logging
logging.basicConfig(filename=LOGFILE,level=logging.DEBUG)
log = logging.getLogger('pilotd')

class PilotDaemon(Daemon):
	server=None
	# Add an empty dictionary on start/end to avoid chart bugs
	def empty(self):
		self.server = None

	# Executed on stop and restart
	def __del__(self):
		if self.server:
			self.server.shutdown()
		self.empty()
		
	def __init__(self, pidfile):
		super(PilotDaemon, self).__init__(pidfile)
		self.empty()
	
	def run(self):	
		#HOST and PORT comes from defaults.py
		self.server = SocketServer.ThreadingTCPServer((settings.HOST, settings.PORT), ThreadedTCPRequestHandler)
		self.server.allow_reuse_address=True
		self.server.server_bind()
		self.server.server_activate()
		self.server.serve_forever()

if __name__ == "__main__":

	daemon = PilotDaemon(PIDFILE)
	
	if len(sys.argv) == 2:
		if 'start' == sys.argv[1]:
			try:
				daemon.start()
			except Exception, e:
				log.exception("Pilotd cant be started")
		elif 'stop' == sys.argv[1]:
			print "Stopping Pilotd ..."
			daemon.stop()
		elif 'restart' == sys.argv[1]:
			print "Restaring Pilotd ..."
			daemon.restart()
		elif 'status' == sys.argv[1]:
			try:
				pf = file(PIDFILE,'r')
				pid = int(pf.read().strip())
				pf.close()
			except IOError:
				pid = None
			except SystemExit:
				pid = None

			if pid:
				print 'Pilotd is running as pid %s' % pid
			else:
				print 'Pilotd is not running.'
		
		else:
			print "Unknown command"
			sys.exit(2)
			sys.exit(0)
	else:
		print "usage: %s start|stop|restart|status" % sys.argv[0]
		sys.exit(2)

